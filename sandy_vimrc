"====================================
"    FileName: .vimrc
"    Author:   sandy he 
"    Version:  1.0.1
"    Date: 2016-11-15
"=============================================
"==================================
"    Vim基本配置
"===================================
"关闭vi的一致性模式 避免以前版本的一些Bug和局限
set nocompatible
"配置backspace键工作方式
set backspace=indent,eol,start
"显示行号
set number
"设置在编辑过程中右下角显示光标的行列信息
set ruler
"当一行文字很长时取消换行
"set nowrap
"在状态栏显示正在输入的命令
set showcmd
"设置历史记录条数
set history=1000
"设置取消备份 禁止临时文件生成
set nobackup
set noswapfile
"突出现实当前行列
"set cursorline
"set cursorcolumn
"设置匹配模式 类似当输入一个左括号时会匹配相应的那个右括号
set showmatch
"设置C/C++方式自动对齐
set autoindent
set cindent
"设置选中单词高亮
set hlsearch
"开启语法高亮功能
syntax enable
syntax on
"指定配色方案为256色
set t_Co=256
"设置搜索时忽略大小写
set ignorecase
"设置在Vim中可以使用鼠标 防止在Linux终端下无法拷贝
"set mouse=a
"设置Tab宽度
set tabstop=4
"设置自动对齐空格数
set shiftwidth=4
"设置按退格键时可以一次删除4个空格
set softtabstop=4
"设置按退格键时可以一次删除4个空格
set smarttab
"将Tab键自动转换成空格 真正需要Tab键时使用[Ctrl + V + Tab]
set expandtab
"设置编码方式
set encoding=utf-8
"自动判断编码时 依次尝试一下编码
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
"检测文件类型
filetype off
"针对不同的文件采用不同的缩进方式
filetype indent on
"允许插件
filetype plugin on
"启动智能补全
filetype plugin indent on
"Vim插件安装在runtimepath目录下
set rtp+=~/.vim/bundle/Vundle.vim
set runtimepath^=~/.vim/bundle/ctrlp.vim
call vundle#rc()
"YCM设置
" 关闭加载.ycm_extra_conf.py提示
let g:ycm_confirm_extra_conf=0
"在注释输入中也能补全
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let g:ycm_complete_in_comments=1
"在字符串输入中也能补全
let g:ycm_complete_in_strings=1
"开启 YCM 基于标签引擎
let g:ycm_collect_identifiers_from_tags_files=1
"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings=1
"语言关键字补全, 不过python关键字都很短，所以，需要的自己打开
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_collect_identifiers_from_tags_files = 1
"内容搜索：ag.vim
let g:ag_prg="<c-q> --vimgrep"
"设置文件跳转
let g:ctrlp_map = '<c-p>' 
let g:ctrlp_cmd = 'CtrlP'
" 设置过滤不进行查找的后缀名 
" let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|pyc)$' 
"映射map保存并退出
map <F1> :wq!<CR>
"设定折叠方式
"set foldmethod=indent "set default foldmethod
"打开vim后自动开启目录
autocmd vimenter * NERDTree
"映射NERDTREE
map <F2> :NERDTreeToggle<CR>
Bundle 'tagbar'
"ctags tag-bar
map <F3> :TagbarToggle<CR>
"启动时自动focus
let g:tagbar_autofocus=1
"从第2个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=2
let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/vim-YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
execute pathogen#infect()
Bundle 'syntastic'
" Syntastic ------------------------------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
 " show list of errors and warnings on the current file
 nmap <leader>e :Errors<CR>
 " turn to next or previous errors, after open errors list
 nmap <leader>n :lnext<CR>
 nmap <leader>p :lprevious<CR>
 " check also when just opened the file
 let g:syntastic_check_on_open = 1
 " syntastic checker for javascript.
 " eslint is the only tool support JSX.
 " If you don't need write JSX, you can use jshint.
 " And eslint is slow, but not a hindrance
 " let g:syntastic_javascript_checkers = ['jshint']
 let g:syntastic_javascript_checkers = ['eslint']
 " don't put icons on the sign column (it hides the vcs status icons of signify)
 let g:syntastic_enable_signs = 0
 " custom icons (enable them if you use a patched font, and enable the previous setting)
 let g:syntastic_error_symbol = '✗'
 let g:syntastic_warning_symbol = '⚠'
 let g:syntastic_style_error_symbol = '✗'
 let g:syntastic_style_warning_symbol = '⚠'
Bundle 'DoxygenToolkit.vim'
let g:DoxygenToolkit_authorName="\tURNAME"
let g:DoxygenToolkit_briefTag_pre = "@brief\t"
let g:DoxygenToolkit_dateTag = "@date\t"
let g:DoxygenToolkit_briefTag_post= "\n/// @complexity\t"
let g:DoxygenToolkit_versionTag= "@version\t"
let g:DoxygenToolkit_paramTag_pre = "@param\t"
let g:DoxygenToolkit_returnTag = "@return\t"
let g:DoxygenToolkit_maxFunctionProtoLines = 30
let g:DoxygenToolkit_briefTag_funcName="yes"
let g:DoxygenToolkit_commentType="C++"
let g:doxygen_enhanced_color=1
"Vundle配置必须 开启插件
filetype plugin indent on
"记住上一次退出位置
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""新文件标题
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"新建.c,.h,.sh,.java文件，自动插入文件头 
autocmd BufNewFile *.sh,*.php,*.py,*.go,*.java exec ":call SetTitle()" 
""定义函数SetTitle，自动插入文件头 
func SetTitle() 
	"如果文件类型为.sh文件 
	if &filetype == 'sh' 
		call setline(1, "\#!/bin/bash") 
		call append(1, "\#########################################################################") 
		call append(2, "\# Author: (".$USER."@.com)") 
		call append(3, "\# Created Time: ".strftime("%Y-%m-%d %H:%M:%S"))
		call append(4, "\# File Name: ".expand("%")) 
		call append(5, "\# Description: ")
		call append(6, "\#########################################################################") 
        call append(7, "set -u")
        call append(8, "set -o pipefail")
		call append(9, "") 
		call append(10, "\# vim: set noexpandtab ts=4 sts=4 sw=4 :")
	elseif &filetype == 'php'
		call setline(1, "<?php") 
		call append(1, "\#########################################################################") 
		call append(2, "\# Author: (".$USER."@github.com)") 
		call append(3, "\# Created Time: ".strftime("%Y-%m-%d %H:%M:%S"))
		call append(4, "\# File Name: ".expand("%")) 
		call append(5, "\# Description: ")
		call append(6, "\#########################################################################") 
		call append(7, "") 
		call append(8, "class ".substitute(expand("%"), '.php', '', 1)." extends ") 
		call append(9, "") 
		call append(10, "\# vim: set noexpandtab ts=4 sts=4 sw=4 :")
	elseif &filetype == 'python'
		call setline(1, "\#!/usr/bin/env python")
		call append(1, "\#-*- coding: utf-8 -*-")
		call append(2, "\#########################################################################")
		call append(2, "\# Author: (".$USER."@github.com)") 
		call append(4, "\# Created Time: ".strftime("%Y-%m-%d %H:%M:%S"))
		call append(5, "\# File Name: ".expand("%")) 
		call append(6, "\# Description: ")
		call append(7, "\#########################################################################")
		call append(8, "")
		call append(9, "\# vim: set noexpandtab ts=4 sts=4 sw=4 :")
	elseif &filetype == 'go'
		call setline(1, "\//######################################################################")
		call append(1, "\// Author: (".$USER."@github.com)") 
		call append(2, "\// Created Time: ".strftime("%Y-%m-%d %H:%M:%S"))
		call append(3, "\// File Name: ".expand("%")) 
		call append(4, "\// Description: ")
		call append(5, "\//#######################################################################")
		call append(6, "")
		call append(7, "\// vim: set noexpandtab ts=4 sts=4 sw=4 :")
	elseif &filetype == 'java'
		call setline(1, "\//######################################################################")
		call append(1, "\// Author: (".$USER."@github.com)") 
		call append(2, "\// Created Time: ".strftime("%Y-%m-%d %H:%M:%S"))
		call append(3, "\// File Name: ".expand("%")) 
		call append(4, "\// Description: ")
		call append(5, "\//#######################################################################")
		call append(6, "")
		call append(7,"public class ".substitute(expand("%"), '.java', '', 1)." {")
		call append(8, "}")
		call append(9, "\// vim: set noexpandtab ts=4 sts=4 sw=4 :")
	endif
	"新建文件后，自动定位到文件末尾
	autocmd BufNewFile * normal G
endfunc 



"使用Vundle来管理Vundle
"Python函数wiki文档
Bundle 'pydoc.vim'
Bundle 'xptemplate'
Bundle 'vim-airline'
Bundle 'vim-startify'
Bundle 'nerdtree'
Bundle 'vim-YouCompleteMe'


"打开vim后自动开启目录
autocmd vimenter * NERDTree
map <C-n> :NERDTreeToggle<CR>
set runtimepath^=~/.vim/bundle/ag
set runtimepath^=~/.vim/bundle/tarbar
let g:vim_markdown_frontmatter=1
